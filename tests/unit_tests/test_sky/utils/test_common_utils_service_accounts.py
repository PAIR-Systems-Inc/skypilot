"""Unit tests for common_utils service account related functionality."""

import unittest

from sky.utils import common_utils


class TestCommonUtilsServiceAccounts(unittest.TestCase):
    """Test common_utils functions related to service accounts."""

    def test_is_valid_user_hash_regular_user_hash(self):
        """Test validation of regular user hashes."""
        # Regular hex-like user hashes should be valid
        valid_hashes = [
            'abc123',
            '12345678',
            'deadbeef',
            'a1b2c3d4',
            'ABCDEF12',  # uppercase should also work
        ]
        
        for user_hash in valid_hashes:
            with self.subTest(user_hash=user_hash):
                result = common_utils.is_valid_user_hash(user_hash)
                self.assertTrue(result, f"Should be valid: {user_hash}")

    def test_is_valid_user_hash_service_account_format(self):
        """Test validation of service account user hashes."""
        # Service account hashes with 'sa-' prefix should be valid
        valid_sa_hashes = [
            'sa-abc123-token-xyz',
            'sa-12345678-test-token-abcd',
            'sa-user-token-name-suffix',
            'sa-a1b2c3d4-mytoken-ef567890',
            'sa-ABC123-TOKEN-XYZ',  # uppercase should work
        ]
        
        for user_hash in valid_sa_hashes:
            with self.subTest(user_hash=user_hash):
                result = common_utils.is_valid_user_hash(user_hash)
                self.assertTrue(result, f"Should be valid: {user_hash}")

    def test_is_valid_user_hash_invalid_format(self):
        """Test validation rejects invalid user hash formats."""
        invalid_hashes = [
            '',  # empty string
            ' ',  # whitespace only
            'invalid_with_underscore',  # underscore not allowed
            'invalid@with.special!chars',  # special characters not allowed
            'invalid with spaces',  # spaces not allowed
            '-starts-with-dash',  # starts with dash
            '123-starts-with-number',  # starts with number then dash is invalid format
        ]
        
        for user_hash in invalid_hashes:
            with self.subTest(user_hash=user_hash):
                result = common_utils.is_valid_user_hash(user_hash)
                self.assertFalse(result, f"Should be invalid: {user_hash}")

    def test_is_valid_user_hash_none(self):
        """Test validation rejects None."""
        result = common_utils.is_valid_user_hash(None)
        self.assertFalse(result)

    def test_is_valid_user_hash_starts_with_letter_or_number(self):
        """Test that valid hashes must start with letter or number."""
        # Valid: starts with letter
        self.assertTrue(common_utils.is_valid_user_hash('abc123'))
        self.assertTrue(common_utils.is_valid_user_hash('a1b2c3'))
        
        # Valid: starts with number  
        self.assertTrue(common_utils.is_valid_user_hash('123abc'))
        self.assertTrue(common_utils.is_valid_user_hash('1a2b3c'))
        
        # Invalid: starts with dash
        self.assertFalse(common_utils.is_valid_user_hash('-abc123'))
        
        # Invalid: starts with special character
        self.assertFalse(common_utils.is_valid_user_hash('@abc123'))

    def test_is_valid_user_hash_service_account_complex_examples(self):
        """Test validation of complex service account examples."""
        # These should match the format generated by _generate_service_account_user_id
        complex_examples = [
            'sa-12345678-mytoken-abcdef0123456789',  # 8 char creator + token name + 16 char suffix
            'sa-abcd1234-test-1234567890abcdef',     # realistic example
            'sa-user123-api-token-xyz987',           # shorter example
            'sa-a-b-c',                              # minimal valid example
        ]
        
        for user_hash in complex_examples:
            with self.subTest(user_hash=user_hash):
                result = common_utils.is_valid_user_hash(user_hash)
                self.assertTrue(result, f"Should be valid: {user_hash}")

    def test_is_valid_user_hash_edge_cases(self):
        """Test validation of edge cases."""
        # Single character (should be valid if alphanumeric)
        self.assertTrue(common_utils.is_valid_user_hash('a'))
        self.assertTrue(common_utils.is_valid_user_hash('1'))
        
        # Very long hash (should still be valid if format is correct)
        long_hash = 'sa-' + 'a' * 100 + '-' + 'b' * 100 + '-' + 'c' * 100
        self.assertTrue(common_utils.is_valid_user_hash(long_hash))
        
        # Mixed case
        self.assertTrue(common_utils.is_valid_user_hash('aBc123DeF'))
        self.assertTrue(common_utils.is_valid_user_hash('Sa-AbC123-DeF-456'))

    def test_is_valid_user_hash_regex_pattern(self):
        """Test that the regex pattern matches the expected format."""
        # The pattern should be: ^[a-zA-Z0-9][a-zA-Z0-9-]*$
        # Meaning: starts with alphanumeric, followed by alphanumeric or hyphens
        
        # Valid patterns
        valid_patterns = [
            'a',              # single letter
            '1',              # single number
            'a1',             # letter + number
            '1a',             # number + letter
            'a-b',            # letter + hyphen + letter
            '1-2',            # number + hyphen + number
            'a-1-b-2',        # mixed with hyphens
            'sa-abc-def',     # service account format
        ]
        
        for pattern in valid_patterns:
            with self.subTest(pattern=pattern):
                self.assertTrue(common_utils.is_valid_user_hash(pattern))
        
        # Invalid patterns
        invalid_patterns = [
            '-a',             # starts with hyphen
            'a-',             # ends with hyphen (actually this should be valid based on regex)
            'a_b',            # contains underscore
            'a.b',            # contains dot
            'a b',            # contains space
            'a@b',            # contains special character
        ]
        
        for pattern in invalid_patterns:
            with self.subTest(pattern=pattern):
                self.assertFalse(common_utils.is_valid_user_hash(pattern))


if __name__ == '__main__':
    unittest.main()