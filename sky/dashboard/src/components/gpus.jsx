/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/X5tLGA3WPNU
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */
import React, { useState, useEffect } from 'react';
import Link from 'next/link';
import { CircularProgress } from '@mui/material';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Layout } from '@/components/elements/layout';
import { RotateCwIcon, SearchIcon, XIcon } from 'lucide-react';
import { useMobile } from '@/hooks/useMobile';
import {
  getGPUs,
  getCloudGPUs,
  getDetailedGpuInfo,
} from '@/data/connectors/gpus';

// Set the refresh interval to 1 minute for GPU data
const GPU_REFRESH_INTERVAL = 60000;

export function GPUs() {
  const [loading, setLoading] = useState(true);
  const [isInitialLoad, setIsInitialLoad] = useState(true);
  const refreshDataRef = React.useRef(null);
  const isMobile = useMobile();
  const [initialDataLoaded, setInitialDataLoaded] = useState(false);

  const [allGPUs, setAllGPUs] = useState([]);
  const [perContextGPUs, setPerContextGPUs] = useState([]);
  const [perNodeGPUs, setPerNodeGPUs] = useState([]);

  // Tab state
  const [selectedTab, setSelectedTab] = useState('kubernetes');
  // Cloud GPUs state
  const [cloudLoading, setCloudLoading] = useState(false);
  const [cloudData, setCloudData] = useState({
    commonGPUs: [],
    tpus: [],
    otherGPUs: [],
  });
  const [cloudInitialLoad, setCloudInitialLoad] = useState(true);
  // Filter state for cloud GPUs (top-level filter box)
  const [filterValue, setFilterValue] = useState('');

  // Detailed search results state
  const [showDetailedResults, setShowDetailedResults] = useState(false);
  const [detailedGpuData, setDetailedGpuData] = useState([]);
  const [detailedGpuLoading, setDetailedGpuLoading] = useState(false);
  // State for filtering detailed results by cloud
  const [detailedCloudFilter, setDetailedCloudFilter] = useState('All Clouds');

  const fetchData = React.useCallback(async () => {
    setLoading(true);
    try {
      const gpusResponse = await getGPUs();
      const {
        allGPUs: fetchedAllGPUs,
        perContextGPUs: fetchedPerContextGPUs,
        perNodeGPUs: fetchedPerNodeGPUs,
      } = gpusResponse;

      setAllGPUs(fetchedAllGPUs || []);
      setPerContextGPUs(fetchedPerContextGPUs || []);
      setPerNodeGPUs(fetchedPerNodeGPUs || []);
    } catch (err) {
      console.error('Error fetching data:', err);
      setAllGPUs([]);
      setPerContextGPUs([]);
      setPerNodeGPUs([]);
    } finally {
      setLoading(false);
      if (isInitialLoad) setIsInitialLoad(false);
      setInitialDataLoaded(true);
    }
  }, [isInitialLoad]);

  React.useEffect(() => {
    if (refreshDataRef) {
      refreshDataRef.current = fetchData;
    }
  }, [refreshDataRef, fetchData]);

  useEffect(() => {
    let isCurrent = true;

    fetchData();

    const interval = setInterval(() => {
      if (isCurrent) {
        fetchData();
      }
    }, GPU_REFRESH_INTERVAL);

    return () => {
      isCurrent = false;
      clearInterval(interval);
    };
  }, [fetchData]);

  const handleRefresh = () => {
    if (selectedTab === 'kubernetes') {
      if (refreshDataRef.current) {
        setIsInitialLoad(false);
        refreshDataRef.current();
      }
    } else if (selectedTab === 'cloud') {
      setCloudLoading(true);
      setCloudInitialLoad(false); // Prevent auto-fetch
      getCloudGPUs()
        .then((data) => {
          setCloudData(data);
        })
        .finally(() => {
          setCloudLoading(false);
        });
    }
  };

  // Calculate summary data
  const totalGpuTypes = allGPUs.length;
  const grandTotalGPUs = allGPUs.reduce((sum, gpu) => sum + gpu.gpu_total, 0);
  const grandTotalFreeGPUs = allGPUs.reduce(
    (sum, gpu) => sum + gpu.gpu_free,
    0
  );

  // Group perContextGPUs by context (already flattened from the backend)
  const groupedPerContextGPUs = React.useMemo(() => {
    if (!perContextGPUs) return {};
    return perContextGPUs.reduce((acc, gpu) => {
      const { context } = gpu;
      if (!acc[context]) {
        acc[context] = [];
      }
      acc[context].push(gpu);
      return acc;
    }, {});
  }, [perContextGPUs]);

  // Group perNodeGPUs by context
  const groupedPerNodeGPUs = React.useMemo(() => {
    if (!perNodeGPUs) return {};
    return perNodeGPUs.reduce((acc, node) => {
      const { context } = node;
      if (!acc[context]) {
        acc[context] = [];
      }
      acc[context].push(node);
      return acc;
    }, {});
  }, [perNodeGPUs]);

  // Fetch cloud GPUs only when tab is selected
  useEffect(() => {
    if (selectedTab === 'cloud' && cloudInitialLoad) {
      setCloudLoading(true);
      getCloudGPUs()
        .then((data) => {
          setCloudData(data);
        })
        .finally(() => {
          setCloudLoading(false);
          setCloudInitialLoad(false);
        });
    }
  }, [selectedTab, cloudInitialLoad]);

  // Function to fetch detailed GPU info
  const fetchDetailedGpuInfo = async (filter) => {
    setDetailedGpuLoading(true);
    try {
      const data = await getDetailedGpuInfo(filter);
      setDetailedGpuData(data);
    } catch (error) {
      console.error('Error fetching detailed GPU info:', error);
      setDetailedGpuData([]);
    } finally {
      setDetailedGpuLoading(false);
    }
  };

  // Handler for search button click
  const handleDetailedSearch = () => {
    setShowDetailedResults(true);
    setDetailedGpuLoading(true);
    fetchDetailedGpuInfo(filterValue);
  };

  // Prepare cloud filter options for detailed results - MOVED TO TOP LEVEL
  const detailedCloudOptions = React.useMemo(() => {
    if (!detailedGpuData || detailedGpuData.length === 0) return ['All Clouds'];
    const clouds = new Set(detailedGpuData.map((gpu) => gpu.cloud));
    return ['All Clouds', ...Array.from(clouds).sort()];
  }, [detailedGpuData]);

  // Filter detailed GPU data by selected cloud - MOVED TO TOP LEVEL
  const currentDetailedGpuData = React.useMemo(() => {
    if (detailedCloudFilter === 'All Clouds') {
      return detailedGpuData;
    }
    return detailedGpuData.filter((gpu) => gpu.cloud === detailedCloudFilter);
  }, [detailedGpuData, detailedCloudFilter]);

  const renderKubernetesTab = () => {
    if (isInitialLoad && loading) {
      return (
        <div className="flex flex-col items-center justify-center h-64">
          <CircularProgress size={32} className="mb-4" />
          <span className="text-gray-500 text-lg">
            Loading Kubernetes GPUs...
          </span>
        </div>
      );
    }

    if (initialDataLoaded && allGPUs.length > 0) {
      return (
        <div className="mb-4">
          <div className="rounded-lg border bg-card text-card-foreground shadow-sm">
            <div className="flex flex-col space-y-1.5 p-6 pb-0">
              <h3 className="text-lg font-semibold">GPUs on Kubernetes</h3>
            </div>
            <div className="p-4">
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                <div>
                  <div className="rounded-lg border bg-card text-card-foreground shadow-sm">
                    <div className="p-4">
                      <p className="text-sm text-gray-500">Total GPU Types</p>
                      <p className="text-2xl font-bold">{totalGpuTypes}</p>
                    </div>
                  </div>
                </div>
                <div>
                  <div className="rounded-lg border bg-card text-card-foreground shadow-sm">
                    <div className="p-4">
                      <p className="text-sm text-gray-500">
                        Total GPUs (All Types)
                      </p>
                      <p className="text-2xl font-bold">{grandTotalGPUs}</p>
                    </div>
                  </div>
                </div>
                <div>
                  <div className="rounded-lg border bg-card text-card-foreground shadow-sm">
                    <div className="p-4">
                      <p className="text-sm text-gray-500">
                        Total Free GPUs (All Types)
                      </p>
                      <p className="text-2xl font-bold">{grandTotalFreeGPUs}</p>
                    </div>
                  </div>
                </div>
              </div>

              <h4 className="text-md font-semibold my-3">GPU Types</h4>
              <div
                className={`
                  grid gap-4
                  ${
                    allGPUs.length === 1
                      ? 'grid-cols-1'
                      : allGPUs.length === 2
                        ? 'grid-cols-2'
                        : 'md:grid-cols-2 xl:grid-cols-3'
                  }
                `}
              >
                {allGPUs.map((gpu) => {
                  const usedGpus = gpu.gpu_total - gpu.gpu_free;
                  const freePercentage =
                    gpu.gpu_total > 0
                      ? (gpu.gpu_free / gpu.gpu_total) * 100
                      : 0;
                  const usedPercentage =
                    gpu.gpu_total > 0 ? (usedGpus / gpu.gpu_total) * 100 : 0;
                  return (
                    <div
                      key={gpu.gpu_name}
                      className="p-2 border rounded w-full"
                    >
                      <div className="flex justify-between items-center mb-1">
                        <span className="font-medium">{gpu.gpu_name}</span>
                        <span className="text-sm text-gray-600">
                          {gpu.gpu_free} free / {gpu.gpu_total} total
                        </span>
                      </div>
                      <div className="w-full bg-gray-200 rounded h-6 flex overflow-hidden">
                        <div
                          style={{ width: `${usedPercentage}%` }}
                          className="bg-sky-500 h-full flex items-center justify-center text-white text-xs"
                          title={`Used: ${usedGpus} (${usedPercentage.toFixed(1)}%)`}
                        >
                          {usedGpus > 0 && usedPercentage > 10
                            ? `${usedGpus} Used`
                            : ''}
                        </div>
                        <div
                          style={{ width: `${freePercentage}%` }}
                          className="bg-green-700 h-full flex items-center justify-center text-white text-xs"
                          title={`Free: ${gpu.gpu_free} (${freePercentage.toFixed(1)}%)`}
                        >
                          {gpu.gpu_free > 0 && freePercentage > 10
                            ? `${gpu.gpu_free} Free`
                            : ''}
                        </div>
                      </div>
                    </div>
                  );
                })}
              </div>

              {Object.keys(groupedPerContextGPUs).length > 0 && (
                <div className="mt-6 pt-6 border-t">
                  <h3 className="text-lg font-semibold mb-3">
                    Per-Context GPU Detail
                  </h3>
                  <div
                    className={`
                      grid gap-6
                      ${Object.keys(groupedPerContextGPUs).length === 1 ? 'grid-cols-1' : 'md:grid-cols-2'}
                    `}
                  >
                    {Object.entries(groupedPerContextGPUs).map(
                      ([context, gpusInContext]) => (
                        <div key={context}>
                          <div className="rounded-lg border bg-card text-card-foreground shadow-sm border flex flex-col h-[420px]">
                            <div className="flex flex-col space-y-1.5 p-4 pb-2">
                              <h3 className="text-md font-normal">
                                Context: {context}
                              </h3>
                            </div>
                            <div className="p-4 pt-2 overflow-y-auto flex-1">
                              <div className="space-y-3">
                                {gpusInContext.map((gpu) => {
                                  const usedGpus = gpu.gpu_total - gpu.gpu_free;
                                  const freePercentage =
                                    gpu.gpu_total > 0
                                      ? (gpu.gpu_free / gpu.gpu_total) * 100
                                      : 0;
                                  const usedPercentage =
                                    gpu.gpu_total > 0
                                      ? (usedGpus / gpu.gpu_total) * 100
                                      : 0;
                                  return (
                                    <div
                                      key={gpu.gpu_name}
                                      className="p-2 border rounded w-full mb-2"
                                    >
                                      <div className="flex justify-between items-center mb-1">
                                        <div>
                                          <span className="font-medium text-gray-800">
                                            {gpu.gpu_name}
                                          </span>
                                          <span className="text-xs text-gray-500 ml-2">
                                            (Requestable:{' '}
                                            {gpu.gpu_requestable_qty_per_node} /
                                            Node)
                                          </span>
                                        </div>
                                        <span className="text-sm text-gray-600">
                                          {gpu.gpu_free} free / {gpu.gpu_total}{' '}
                                          total
                                        </span>
                                      </div>
                                      <div className="w-full bg-gray-200 rounded h-6 flex overflow-hidden mt-1">
                                        <div
                                          style={{
                                            width: `${usedPercentage}%`,
                                          }}
                                          className="bg-sky-500 h-full flex items-center justify-center text-white text-xs"
                                          title={`Used: ${usedGpus} (${usedPercentage.toFixed(1)}%)`}
                                        >
                                          {usedGpus > 0 && usedPercentage > 10
                                            ? `${usedGpus} Used`
                                            : ''}
                                        </div>
                                        <div
                                          style={{
                                            width: `${freePercentage}%`,
                                          }}
                                          className="bg-green-700 h-full flex items-center justify-center text-white text-xs"
                                          title={`Free: ${gpu.gpu_free} (${freePercentage.toFixed(1)}%)`}
                                        >
                                          {gpu.gpu_free > 0 &&
                                          freePercentage > 10
                                            ? `${gpu.gpu_free} Free`
                                            : ''}
                                        </div>
                                      </div>
                                    </div>
                                  );
                                })}
                              </div>

                              {groupedPerNodeGPUs[context] &&
                                groupedPerNodeGPUs[context].length > 0 && (
                                  <div className="mt-4 pt-3">
                                    <div className="max-h-52 overflow-y-auto">
                                      <div className="overflow-x-auto">
                                        <table className="min-w-full text-sm border-b border-gray-200">
                                          <thead className="bg-gray-100 sticky top-0 z-10">
                                            <tr>
                                              <th className="p-2 text-left font-medium text-gray-600">
                                                Node
                                              </th>
                                              <th className="p-2 text-left font-medium text-gray-600">
                                                GPU
                                              </th>
                                              <th className="p-2 text-right font-medium text-gray-600">
                                                Availability
                                              </th>
                                            </tr>
                                          </thead>
                                          <tbody className="bg-white divide-y divide-gray-200">
                                            {groupedPerNodeGPUs[context].map(
                                              (node, index) => (
                                                <tr
                                                  key={`${node.node_name}-${index}`}
                                                >
                                                  <td className="p-2 whitespace-nowrap text-gray-700">
                                                    {node.node_name}
                                                  </td>
                                                  <td className="p-2 whitespace-nowrap text-gray-700">
                                                    {node.gpu_name}
                                                  </td>
                                                  <td className="p-2 whitespace-nowrap text-right text-gray-700">
                                                    {`${node.gpu_free} of ${node.gpu_total} free`}
                                                  </td>
                                                </tr>
                                              )
                                            )}
                                          </tbody>
                                        </table>
                                      </div>
                                    </div>
                                  </div>
                                )}
                            </div>
                          </div>
                        </div>
                      )
                    )}
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      );
    }

    if (initialDataLoaded && allGPUs.length === 0) {
      return (
        <div className="mb-4">
          <div className="rounded-lg border bg-card text-card-foreground shadow-sm">
            <div className="p-4">
              <p className="text-sm text-gray-500">
                No Kubernetes GPUs found or Kubernetes is not configured.
              </p>
            </div>
          </div>
        </div>
      );
    }

    return null;
  };

  const renderCloudTab = () => {
    // Filter function to match GPU data based on user input
    const filterGpuData = (data) => {
      if (!data) return [];
      if (!filterValue.trim()) return data;

      const filter = filterValue.trim().toLowerCase();
      let filterType = null;
      let filterCount = null;

      // Parse filter like "A100:2" into type and count
      if (filter.includes(':')) {
        const [type, count] = filter.split(':');
        filterType = type.trim();
        filterCount = parseInt(count.trim());
        if (isNaN(filterCount)) filterCount = null;
      } else {
        filterType = filter;
      }

      return data.filter((item) => {
        const gpuType = (item.gpu_name || '').toLowerCase();
        if (!gpuType.includes(filterType)) return false;

        // If count is specified, check if any available quantity matches
        if (filterCount !== null) {
          // Check if gpu_quantities is available and contains the filtered count
          const quantities = item.gpu_quantities || '';
          return quantities.includes(filterCount.toString());
        }

        return true;
      });
    };

    const filteredCommonGpus = filterGpuData(cloudData.commonGPUs);
    const filteredTpus = filterGpuData(cloudData.tpus);
    const filteredOtherGpus = filterGpuData(cloudData.otherGPUs);

    if (cloudLoading && cloudInitialLoad) {
      return (
        <div className="flex flex-col items-center justify-center h-64">
          <CircularProgress size={32} className="mb-4" />
          <span className="text-gray-500 text-lg">Loading Cloud GPUs...</span>
        </div>
      );
    }

    if (
      (cloudData.commonGPUs && cloudData.commonGPUs.length > 0) ||
      (cloudData.tpus && cloudData.tpus.length > 0) ||
      (cloudData.otherGPUs && cloudData.otherGPUs.length > 0)
    ) {
      return (
        <div className="px-4 py-2">
          <div className="mt-2 mb-4">
            <div className="flex items-center">
              <div className="relative flex-grow">
                <input
                  type="text"
                  placeholder="Filter GPUs (e.g., A100 or A100:2)"
                  value={filterValue}
                  onChange={(e) => setFilterValue(e.target.value)}
                  className="px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 w-full pr-10"
                />
                {filterValue.trim() && (
                  <button
                    onClick={() => {
                      setFilterValue('');
                      setShowDetailedResults(false);
                      setDetailedCloudFilter('All Clouds');
                    }}
                    className="absolute inset-y-0 right-0 flex items-center pr-3 text-gray-400 hover:text-gray-600"
                    title="Clear filter"
                  >
                    <XIcon size={18} />
                  </button>
                )}
              </div>
              {filterValue.trim() && (
                <button
                  onClick={handleDetailedSearch}
                  className="ml-2 px-3 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 focus:outline-none text-sm shrink-0"
                  title="Show detailed GPU information"
                >
                  Search for more details
                </button>
              )}
            </div>
          </div>

          {/* Detailed GPU Results Section */}
          {showDetailedResults && (
            <div className="mb-6 border rounded-lg p-4 bg-white">
              <div className="flex justify-between items-center mb-4">
                <div className="flex items-center">
                  <h3 className="text-lg font-semibold mr-4">
                    Detailed GPU Info: {filterValue}
                  </h3>
                  {detailedGpuData && detailedGpuData.length > 0 && (
                    <select
                      value={detailedCloudFilter}
                      onChange={(e) => setDetailedCloudFilter(e.target.value)}
                      className="px-2 py-1 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 text-sm"
                    >
                      {detailedCloudOptions.map((cloud) => (
                        <option key={cloud} value={cloud}>
                          {cloud}
                        </option>
                      ))}
                    </select>
                  )}
                </div>
                <button
                  onClick={() => {
                    setShowDetailedResults(false);
                    setDetailedCloudFilter('All Clouds'); // Reset filter on close
                  }}
                  className="text-gray-500 hover:text-gray-700"
                >
                  <XIcon size={18} />
                </button>
              </div>

              {detailedGpuLoading ? (
                <div className="flex flex-col items-center justify-center py-10">
                  <CircularProgress size={32} className="mb-4" />
                  <span className="text-gray-500">
                    Loading detailed GPU information...
                  </span>
                </div>
              ) : currentDetailedGpuData &&
                currentDetailedGpuData.length > 0 ? (
                <div className="overflow-x-auto">
                  <table className="min-w-full text-sm border-b border-gray-200">
                    <thead className="bg-gray-100">
                      <tr>
                        <th className="p-2 text-left font-medium text-gray-600">
                          GPU
                        </th>
                        <th className="p-2 text-left font-medium text-gray-600">
                          QTY
                        </th>
                        <th className="p-2 text-left font-medium text-gray-600">
                          CLOUD
                        </th>
                        <th className="p-2 text-left font-medium text-gray-600">
                          INSTANCE TYPE
                        </th>
                        <th className="p-2 text-left font-medium text-gray-600">
                          DEVICE MEM
                        </th>
                        <th className="p-2 text-left font-medium text-gray-600">
                          vCPUs
                        </th>
                        <th className="p-2 text-left font-medium text-gray-600">
                          HOST MEM
                        </th>
                        <th className="p-2 text-left font-medium text-gray-600">
                          HOURLY PRICE
                        </th>
                        <th className="p-2 text-left font-medium text-gray-600">
                          HOURLY SPOT PRICE
                        </th>
                        <th className="p-2 text-left font-medium text-gray-600">
                          REGION
                        </th>
                      </tr>
                    </thead>
                    <tbody className="bg-white divide-y divide-gray-200">
                      {currentDetailedGpuData.map((gpu, idx) => (
                        <tr
                          key={`detailed-gpu-${idx}-${gpu.cloud}-${gpu.instance_type}-${gpu.region}`}
                        >
                          <td className="p-2 whitespace-nowrap text-gray-700">
                            {gpu.accelerator_name}
                          </td>
                          <td className="p-2 whitespace-nowrap text-gray-700">
                            {gpu.accelerator_count}
                          </td>
                          <td className="p-2 whitespace-nowrap text-gray-700">
                            {gpu.cloud}
                          </td>
                          <td className="p-2 whitespace-nowrap text-gray-700">
                            {gpu.instance_type}
                          </td>
                          <td className="p-2 whitespace-nowrap text-gray-700">
                            {gpu.device_memory}
                          </td>
                          <td className="p-2 whitespace-nowrap text-gray-700">
                            {gpu.cpu_count}
                          </td>
                          <td className="p-2 whitespace-nowrap text-gray-700">
                            {gpu.memory}
                          </td>
                          <td className="p-2 whitespace-nowrap text-gray-700">
                            {gpu.price}
                          </td>
                          <td className="p-2 whitespace-nowrap text-gray-700">
                            {gpu.spot_price}
                          </td>
                          <td className="p-2 whitespace-nowrap text-gray-700">
                            {gpu.region}
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              ) : (
                <div className="text-center py-8 text-gray-500">
                  No detailed information found for &quot;{filterValue}&quot;{' '}
                  {detailedCloudFilter !== 'All Clouds'
                    ? `in ${detailedCloudFilter}`
                    : ''}
                  .
                </div>
              )}
            </div>
          )}

          {/* Display cloud GPUs in a grid layout */}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
            {/* Common GPUs and Other GPUs in the first column/row */}
            <div>
              {filteredCommonGpus && filteredCommonGpus.length > 0 && (
                <div className="mb-4">
                  <div className="rounded-lg border bg-card text-card-foreground shadow-sm p-4 h-full">
                    <CloudGpuTable
                      data={filteredCommonGpus}
                      title="Common GPUs"
                    />
                  </div>
                </div>
              )}
              {filteredOtherGpus && filteredOtherGpus.length > 0 && (
                <div className="mb-4">
                  <div className="rounded-lg border bg-card text-card-foreground shadow-sm p-4 h-full">
                    <CloudGpuTable
                      data={filteredOtherGpus}
                      title="Other GPUs"
                    />
                  </div>
                </div>
              )}
            </div>

            {/* TPUs in the second column/row */}
            <div>
              {filteredTpus && filteredTpus.length > 0 && (
                <div className="mb-4">
                  <div className="rounded-lg border bg-card text-card-foreground shadow-sm p-4 h-full">
                    <CloudGpuTable data={filteredTpus} title="TPUs" />
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      );
    }

    if (!cloudLoading && !cloudInitialLoad) {
      return (
        <div className="mb-4">
          <div className="rounded-lg border bg-card text-card-foreground shadow-sm p-4">
            <p className="text-sm text-gray-500">
              No Cloud GPUs found or cloud providers are not configured.
            </p>
          </div>
        </div>
      );
    }

    return null;
  };

  return (
    <Layout highlighted="gpus">
      <div className="flex items-center mb-4 h-5 w-full">
        <div className="flex space-x-6">
          <button
            className={`transition-colors duration-150 border-b-2 ${selectedTab === 'kubernetes' ? 'border-transparent text-blue-600' : 'border-transparent text-gray-500 hover:text-blue-600'}`}
            onClick={() => setSelectedTab('kubernetes')}
          >
            Kubernetes GPUs
          </button>
          <button
            className={`transition-colors duration-150 border-b-2 ${selectedTab === 'cloud' ? 'border-transparent text-blue-600' : 'border-transparent text-gray-500 hover:text-blue-600'}`}
            onClick={() => setSelectedTab('cloud')}
          >
            Cloud GPUs
          </button>
        </div>
        <div className="flex items-center space-x-2 ml-auto">
          {(selectedTab === 'kubernetes' && loading && isInitialLoad) ||
          (selectedTab === 'cloud' && cloudLoading) ? (
            <div className="flex items-center mr-2">
              <CircularProgress size={15} className="mt-0" />
              <span className="ml-2 text-gray-500 text-sm">Loading...</span>
            </div>
          ) : null}
          {(selectedTab === 'kubernetes' && loading && !isInitialLoad) ||
          (selectedTab === 'cloud' && cloudLoading && !cloudInitialLoad) ? (
            <div className="flex items-center mr-2">
              <CircularProgress size={15} className="mt-0" />
              <span className="ml-2 text-gray-500 text-sm">Refreshing...</span>
            </div>
          ) : null}
          <button
            className="text-sky-blue hover:text-sky-blue-bright inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium h-9 rounded-md px-3 hover:bg-accent hover:text-accent-foreground disabled:pointer-events-none disabled:opacity-50"
            onClick={handleRefresh}
            disabled={
              (selectedTab === 'kubernetes' && loading) ||
              (selectedTab === 'cloud' && cloudLoading)
            }
            title="Refresh"
          >
            <RotateCwIcon className="h-4 w-4 mr-1.5" />
            {!isMobile && <span>Refresh</span>}
          </button>
        </div>
      </div>

      {/* Tab Content */}
      {selectedTab === 'kubernetes' && renderKubernetesTab()}
      {selectedTab === 'cloud' && renderCloudTab()}
    </Layout>
  );
}

// Helper table component for cloud GPUs
function CloudGpuTable({ data, title }) {
  const [currentPage, setCurrentPage] = React.useState(1);
  const [pageSize, setPageSize] = React.useState(10);

  if (!data || data.length === 0) {
    return (
      <>
        <h3 className="text-lg font-semibold mb-3">{title}</h3>
        <p className="text-sm text-gray-500">
          No GPUs found for this category.
        </p>
      </>
    );
  }

  const totalPages = Math.ceil(data.length / pageSize);
  const startIndex = (currentPage - 1) * pageSize;
  const endIndex = Math.min(startIndex + pageSize, data.length);
  const paginatedData = data.slice(startIndex, endIndex);

  const goToPreviousPage = () => {
    setCurrentPage((page) => Math.max(page - 1, 1));
  };
  const goToNextPage = () => {
    setCurrentPage((page) => Math.min(page + 1, totalPages));
  };
  const handlePageSizeChange = (e) => {
    const newSize = parseInt(e.target.value, 10);
    setPageSize(newSize);
    setCurrentPage(1); // Reset to first page when page size changes
  };

  return (
    <>
      <h3 className="text-lg font-semibold mb-3">{title}</h3>
      <div className="overflow-x-auto">
        <table className="min-w-full text-sm border-b border-gray-200">
          <thead className="bg-gray-100">
            <tr>
              <th className="p-2 text-left font-medium text-gray-600">GPU</th>
              <th className="p-2 text-left font-medium text-gray-600">
                Available Quantities / Node
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {paginatedData.map((gpu, idx) => (
              <tr key={`${gpu.gpu_name}-${idx}`}>
                <td className="p-2 whitespace-nowrap text-gray-700">
                  {gpu.gpu_name}
                </td>
                <td className="p-2 whitespace-nowrap text-gray-700">
                  {gpu.gpu_quantities}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
      {/* Pagination controls */}
      {data.length > pageSize && (
        <div className="flex justify-end items-center py-2 px-4 text-sm text-gray-700">
          <div className="flex items-center space-x-4">
            <div className="flex items-center">
              <span className="mr-2">Rows per page:</span>
              <div className="relative inline-block">
                <select
                  value={pageSize}
                  onChange={handlePageSizeChange}
                  className="py-1 pl-2 pr-6 appearance-none outline-none cursor-pointer border-none bg-transparent"
                  style={{ minWidth: '40px' }}
                >
                  <option value={10}>10</option>
                  <option value={25}>25</option>
                  <option value={50}>50</option>
                  <option value={100}>100</option>
                </select>
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-4 w-4 text-gray-500 absolute right-0 top-1/2 transform -translate-y-1/2 pointer-events-none"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M19 9l-7 7-7-7"
                  />
                </svg>
              </div>
            </div>
            <div>
              {startIndex + 1} – {endIndex} of {data.length}
            </div>
            <div className="flex items-center space-x-2">
              <button
                className="p-1 rounded-full hover:bg-gray-200 disabled:opacity-30 disabled:hover:bg-transparent"
                onClick={goToPreviousPage}
                disabled={currentPage === 1}
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                >
                  <path d="M15 18l-6-6 6-6" />
                </svg>
              </button>
              <button
                className="p-1 rounded-full hover:bg-gray-200 disabled:opacity-30 disabled:hover:bg-transparent"
                onClick={goToNextPage}
                disabled={currentPage === totalPages || totalPages === 0}
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                >
                  <path d="M9 18l6-6-6-6" />
                </svg>
              </button>
            </div>
          </div>
        </div>
      )}
    </>
  );
}
