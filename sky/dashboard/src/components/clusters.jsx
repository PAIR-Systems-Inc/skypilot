/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/t5SMh01qKCm
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */
'use client';

import React, {
  useState,
  useEffect,
  useMemo,
  useCallback,
  useRef,
} from 'react';
import { useRouter } from 'next/router';
import { CircularProgress } from '@mui/material';
import {
  CustomTooltip as Tooltip,
  NonCapitalizedTooltip,
  REFRESH_INTERVAL,
  TimestampWithTooltip,
} from '@/components/utils';
import Link from 'next/link';

import { Card } from '@/components/ui/card';
import {
  Table,
  TableHeader,
  TableRow,
  TableHead,
  TableBody,
  TableCell,
} from '@/components/ui/table';
import { getClusters, getClusterHistory } from '@/data/connectors/clusters';
import { getWorkspaces } from '@/data/connectors/workspaces';
import { getUsers } from '@/data/connectors/users';
import { sortData } from '@/data/utils';
import { SquareCode, Terminal, RotateCwIcon } from 'lucide-react';
import { relativeTime } from '@/components/utils';
import { Layout } from '@/components/elements/layout';
import {
  SSHInstructionsModal,
  VSCodeInstructionsModal,
} from '@/components/elements/modals';
import { StatusBadge } from '@/components/elements/StatusBadge';
import { useMobile } from '@/hooks/useMobile';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import dashboardCache from '@/lib/cache';
import cachePreloader from '@/lib/cache-preloader';
import { ChevronDownIcon, ChevronRightIcon } from 'lucide-react';
import yaml from 'js-yaml';
import { UserDisplay } from '@/components/elements/UserDisplay';
import { FilterSystem, SearchInput } from '@/components/FilterSystem';

// Helper function to format cost (copied from workspaces.jsx)
// const formatCost = (cost) => { // Cost function removed
//   if (cost >= 10) {
//     // Use the user-updated threshold of 10
//     return cost.toFixed(1);
//   }
//   return cost.toFixed(2);
// };

const ALL_WORKSPACES_VALUE = '__ALL_WORKSPACES__'; // Define constant for "All Workspaces"

// Define constant for "All Users" similar to workspaces
const ALL_USERS_VALUE = '__ALL_USERS__';

// Helper function to filter clusters by name
export function filterClustersByName(clusters, nameFilter) {
  // If no name filter, return all clusters
  if (!nameFilter || nameFilter.trim() === '') {
    return clusters;
  }

  // Filter clusters by the name filter (case-insensitive partial match)
  const filterLower = nameFilter.toLowerCase().trim();
  return clusters.filter((cluster) => {
    const clusterName = cluster.cluster || '';
    return clusterName.toLowerCase().includes(filterLower);
  });
}

// Helper function to format autostop information, similar to _get_autostop in CLI utils
const formatAutostop = (autostop, toDown) => {
  let autostopStr = '';
  let separation = '';

  if (autostop >= 0) {
    autostopStr = autostop + 'm';
    separation = ' ';
  }

  if (toDown) {
    autostopStr += `${separation}(down)`;
  }

  if (autostopStr === '') {
    autostopStr = '-';
  }

  return autostopStr;
};

// Helper function to format username for display (reuse from users.jsx)
const formatUserDisplay = (username, userId) => {
  if (username && username.includes('@')) {
    const emailPrefix = username.split('@')[0];
    // Show email prefix with userId if they're different
    if (userId && userId !== emailPrefix) {
      return `${emailPrefix} (${userId})`;
    }
    return emailPrefix;
  }
  // If no email, show username with userId in parentheses only if they're different
  const usernameBase = username || userId || 'N/A';

  // Skip showing userId if it's the same as username
  if (userId && userId !== usernameBase) {
    return `${usernameBase} (${userId})`;
  }

  return usernameBase;
};

// Helper function to format duration in a human-readable way
const formatDuration = (durationSeconds) => {
  if (!durationSeconds || durationSeconds < 0) {
    return '-';
  }

  const hours = Math.floor(durationSeconds / 3600);
  const minutes = Math.floor((durationSeconds % 3600) / 60);
  const seconds = durationSeconds % 60;

  if (hours > 0) {
    return `${hours}h ${minutes}m ${seconds}s`;
  } else if (minutes > 0) {
    return `${minutes}m ${seconds}s`;
  } else {
    return `${seconds}s`;
  }
};

export function Clusters() {
  const router = useRouter();
  const [loading, setLoading] = useState(false);
  const refreshDataRef = React.useRef(null);
  const [isSSHModalOpen, setIsSSHModalOpen] = useState(false);
  const [isVSCodeModalOpen, setIsVSCodeModalOpen] = useState(false);
  const [selectedCluster, setSelectedCluster] = useState(null);
  
  // Modern filter state - using a single object to manage all filters
  const [filters, setFilters] = useState({});
  const [workspaces, setWorkspaces] = useState([]);
  const [users, setUsers] = useState([]);
  const [showHistory, setShowHistory] = useState(false);
  const isMobile = useMobile();

  // Define filter configuration for the new filter system
  const filterConfig = useMemo(() => [
    {
      key: 'search',
      label: 'Search',
      type: 'text',
      placeholder: 'Search clusters by name...',
    },
    {
      key: 'workspace',
      label: 'Workspace',
      type: 'select',
      options: workspaces.map(ws => ({ value: ws, label: ws })),
    },
    {
      key: 'user',
      label: 'User',
      type: 'select',
      options: users.map(user => ({ value: user.userId, label: user.display })),
    },
    {
      key: 'status',
      label: 'Status',
      type: 'select',
      options: [
        { value: 'RUNNING', label: 'Running' },
        { value: 'STOPPED', label: 'Stopped' },
        { value: 'LAUNCHING', label: 'Launching' },
        { value: 'STOPPING', label: 'Stopping' },
        { value: 'TERMINATED', label: 'Terminated' },
      ],
    },
  ], [workspaces, users]);

  // Handle URL query parameters for filtering (backward compatibility)
  useEffect(() => {
    if (router.isReady) {
      const newFilters = {};
      
      if (router.query.workspace) {
        const workspaceParam = Array.isArray(router.query.workspace)
          ? router.query.workspace[0]
          : router.query.workspace;
        newFilters.workspace = workspaceParam;
      }
      
      if (router.query.user) {
        const userParam = Array.isArray(router.query.user)
          ? router.query.user[0]
          : router.query.user;
        newFilters.user = userParam;
      }
      
      if (router.query.name) {
        const nameParam = Array.isArray(router.query.name)
          ? router.query.name[0]
          : router.query.name;
        newFilters.search = nameParam;
      }
      
      setFilters(newFilters);
    }
  }, [
    router.isReady,
    router.query.workspace,
    router.query.user,
    router.query.name,
  ]);

  // Helper function to update URL query parameters
  const updateURLParams = (newFilters) => {
    const query = { ...router.query };

    // Update parameters based on filters
    if (newFilters.workspace) {
      query.workspace = newFilters.workspace;
    } else {
      delete query.workspace;
    }

    if (newFilters.user) {
      query.user = newFilters.user;
    } else {
      delete query.user;
    }

    if (newFilters.search) {
      query.name = newFilters.search;
    } else {
      delete query.name;
    }

    // Use replace to avoid adding to browser history for filter changes
    router.replace(
      {
        pathname: router.pathname,
        query,
      },
      undefined,
      { shallow: true }
    );
  };

  // Handle filter changes
  const handleFiltersChange = (newFilters) => {
    setFilters(newFilters);
    updateURLParams(newFilters);
  };

  useEffect(() => {
    const fetchFilterData = async () => {
      try {
        // Trigger cache preloading for clusters page and background preload other pages
        await cachePreloader.preloadForPage('clusters');

        // Fetch configured workspaces for the filter dropdown
        const fetchedWorkspacesConfig = await dashboardCache.get(getWorkspaces);
        const configuredWorkspaceNames = Object.keys(fetchedWorkspacesConfig);

        // Fetch all clusters to see if 'default' workspace is implicitly used
        const allClusters = await dashboardCache.get(getClusters);
        const uniqueClusterWorkspaces = [
          ...new Set(
            allClusters
              .map((cluster) => cluster.workspace || 'default')
              .filter((ws) => ws)
          ),
        ];

        // Combine configured workspaces with any actively used 'default' workspace
        const finalWorkspaces = new Set(configuredWorkspaceNames);
        if (
          uniqueClusterWorkspaces.includes('default') &&
          !finalWorkspaces.has('default')
        ) {
          // Add 'default' if it's used by clusters but not in configured list
          // This ensures 'default' appears if relevant, even if not explicitly in skypilot config
        }
        // Ensure all unique cluster workspaces are in the list, especially 'default'
        uniqueClusterWorkspaces.forEach((wsName) =>
          finalWorkspaces.add(wsName)
        );

        setWorkspaces(Array.from(finalWorkspaces).sort());

        // Fetch users for the filter dropdown
        const fetchedUsers = await dashboardCache.get(getUsers);
        const uniqueClusterUsers = [
          ...new Set(
            allClusters
              .map((cluster) => ({
                userId: cluster.user_hash || cluster.user,
                username: cluster.user,
              }))
              .filter((user) => user.userId)
          ).values(),
        ];

        // Combine fetched users with unique cluster users
        const finalUsers = new Map();

        // Add fetched users first
        fetchedUsers.forEach((user) => {
          finalUsers.set(user.userId, {
            userId: user.userId,
            username: user.username,
            display: formatUserDisplay(user.username, user.userId),
          });
        });

        // Add any cluster users not in the fetched list
        uniqueClusterUsers.forEach((user) => {
          if (!finalUsers.has(user.userId)) {
            finalUsers.set(user.userId, {
              userId: user.userId,
              username: user.username,
              display: formatUserDisplay(user.username, user.userId),
            });
          }
        });

        setUsers(
          Array.from(finalUsers.values()).sort((a, b) =>
            a.display.localeCompare(b.display)
          )
        );
      } catch (error) {
        console.error('Error fetching data for filters:', error);
        setWorkspaces(['default']); // Fallback or error state
        setUsers([]); // Fallback or error state
      }
    };
    fetchFilterData();
  }, []);

  const handleRefresh = () => {
    // Invalidate cache to ensure fresh data is fetched
    dashboardCache.invalidate(getClusters);
    dashboardCache.invalidate(getClusterHistory);
    dashboardCache.invalidate(getWorkspaces);
    dashboardCache.invalidate(getUsers);

    if (refreshDataRef.current) {
      refreshDataRef.current();
    }
  };

  return (
    <>
      <div className="flex flex-col sm:flex-row sm:items-center justify-between mb-4 gap-4">
        <div className="flex items-center gap-4">
          <Link
            href="/clusters"
            className="text-sky-blue hover:underline text-lg font-medium"
          >
            Sky Clusters
          </Link>
          
          {/* Show history toggle */}
          <label className="flex items-center cursor-pointer">
            <input
              type="checkbox"
              checked={showHistory}
              onChange={(e) => setShowHistory(e.target.checked)}
              className="sr-only"
            />
            <div
              className={`relative inline-flex h-5 w-9 items-center rounded-full transition-colors ${
                showHistory ? 'bg-sky-600' : 'bg-gray-300'
              }`}
            >
              <span
                className={`inline-block h-3 w-3 transform rounded-full bg-white transition-transform ${
                  showHistory ? 'translate-x-5' : 'translate-x-1'
                }`}
              />
            </div>
            <span className="ml-2 text-sm text-gray-700">
              Show history (Last 30 days)
            </span>
          </label>
        </div>

        {/* Right side: Filter system and refresh button */}
        <div className="flex items-center gap-3">
          {/* Modern filter system */}
          <FilterSystem
            filters={filters}
            onFiltersChange={handleFiltersChange}
            filterConfig={filterConfig}
            className="flex-shrink-0"
          />

          {/* Loading indicator and refresh button */}
          <div className="flex items-center gap-2">
            {/* Loading indicator */}
            {loading && (
              <div className="flex items-center">
                <CircularProgress size={15} className="mt-0" />
                <span className="ml-2 text-gray-500 text-sm">Loading...</span>
              </div>
            )}
                         <button
               onClick={handleRefresh}
               disabled={loading}
               className="h-8 px-3 text-sm flex items-center gap-2 border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50"
             >
               <RotateCwIcon className="h-4 w-4" />
               {!isMobile && <span>Refresh</span>}
             </button>
          </div>
        </div>
      </div>

      <ClusterTable
        refreshInterval={REFRESH_INTERVAL}
        setLoading={setLoading}
        refreshDataRef={refreshDataRef}
        filters={filters}
        showHistory={showHistory}
        onOpenSSHModal={(cluster) => {
          setSelectedCluster(cluster);
          setIsSSHModalOpen(true);
        }}
        onOpenVSCodeModal={(cluster) => {
          setSelectedCluster(cluster);
          setIsVSCodeModalOpen(true);
        }}
      />

      {/* SSH Instructions Modal */}
      <SSHInstructionsModal
        isOpen={isSSHModalOpen}
        onClose={() => setIsSSHModalOpen(false)}
        cluster={selectedCluster}
      />

      <VSCodeInstructionsModal
        isOpen={isVSCodeModalOpen}
        onClose={() => setIsVSCodeModalOpen(false)}
        cluster={selectedCluster}
      />
    </>
  );
}

export function ClusterTable({
  refreshInterval,
  setLoading,
  refreshDataRef,
  filters,
  showHistory,
  onOpenSSHModal,
  onOpenVSCodeModal,
}) {
  const [data, setData] = useState([]);
  const [sortConfig, setSortConfig] = useState({
    key: null,
    direction: 'ascending',
  });
  const [loading, setLocalLoading] = useState(false);
  const [isInitialLoad, setIsInitialLoad] = useState(true);
  const [currentPage, setCurrentPage] = useState(1);
  const [pageSize, setPageSize] = useState(10);

  const fetchData = React.useCallback(async () => {
    setLoading(true);
    setLocalLoading(true);

    try {
      const activeClusters = await dashboardCache.get(getClusters);

      if (showHistory) {
        const historyClusters = await dashboardCache.get(getClusterHistory);
        // Mark clusters as active or historical for UI distinction
        const markedActiveClusters = activeClusters.map((cluster) => ({
          ...cluster,
          isHistorical: false,
        }));
        const markedHistoryClusters = historyClusters.map((cluster) => ({
          ...cluster,
          isHistorical: true,
        }));
        // Combine and remove duplicates (prefer active over historical)
        const combinedData = [...markedActiveClusters];
        markedHistoryClusters.forEach((histCluster) => {
          const existsInActive = activeClusters.some(
            (activeCluster) =>
              (activeCluster.cluster || activeCluster.name) ===
              (histCluster.cluster || histCluster.name)
          );
          if (!existsInActive) {
            combinedData.push(histCluster);
          }
        });
        setData(combinedData);
      } else {
        // Mark active clusters for consistency
        const markedActiveClusters = activeClusters.map((cluster) => ({
          ...cluster,
          isHistorical: false,
        }));
        setData(markedActiveClusters);
      }
    } catch (error) {
      console.error('Error fetching cluster data:', error);
      setData([]);
    }

    setLoading(false);
    setLocalLoading(false);
    setIsInitialLoad(false);
  }, [setLoading, showHistory]);

  // Apply filters to data
  const sortedData = React.useMemo(() => {
    let filteredData = data;
    
    // Apply search filter
    if (filters.search) {
      filteredData = filterClustersByName(filteredData, filters.search);
    }
    
    // Apply workspace filter
    if (filters.workspace) {
      filteredData = filteredData.filter((item) => {
        const itemWorkspace = item.workspace || 'default';
        return itemWorkspace.toLowerCase() === filters.workspace.toLowerCase();
      });
    }
    
    // Apply user filter
    if (filters.user) {
      filteredData = filteredData.filter((item) => {
        const itemUserId = item.user_hash || item.user;
        return itemUserId === filters.user;
      });
    }
    
    // Apply status filter
    if (filters.status) {
      filteredData = filteredData.filter((item) => {
        return item.status === filters.status;
      });
    }
    
    return sortData(filteredData, sortConfig.key, sortConfig.direction);
  }, [data, sortConfig, filters]);

  // Expose fetchData to parent component
  React.useEffect(() => {
    if (refreshDataRef) {
      refreshDataRef.current = fetchData;
    }
  }, [refreshDataRef, fetchData]);

  useEffect(() => {
    setData([]);
    let isCurrent = true;

    fetchData();

    const interval = setInterval(() => {
      if (isCurrent) {
        fetchData();
      }
    }, refreshInterval);

    return () => {
      isCurrent = false;
      clearInterval(interval);
    };
  }, [refreshInterval, fetchData]);

  // Reset to first page when data changes
  useEffect(() => {
    setCurrentPage(1);
  }, [data.length]);

  const requestSort = (key) => {
    let direction = 'ascending';
    if (sortConfig.key === key && sortConfig.direction === 'ascending') {
      direction = 'descending';
    }
    setSortConfig({ key, direction });
  };

  const getSortDirection = (key) => {
    if (sortConfig.key === key) {
      return sortConfig.direction === 'ascending' ? ' ↑' : ' ↓';
    }
    return '';
  };

  // Calculate pagination using sortedData
  const totalPages = Math.ceil(sortedData.length / pageSize);
  const startIndex = (currentPage - 1) * pageSize;
  const endIndex = startIndex + pageSize;
  const paginatedData = sortedData.slice(startIndex, endIndex);

  // Page navigation handlers
  const goToPreviousPage = () => {
    setCurrentPage((page) => Math.max(page - 1, 1));
  };

  const goToNextPage = () => {
    setCurrentPage((page) => Math.min(page + 1, totalPages));
  };

  const handlePageSizeChange = (e) => {
    const newSize = parseInt(e.target.value, 10);
    setPageSize(newSize);
    setCurrentPage(1); // Reset to first page when changing page size
  };

  return (
    <div>
      <Card>
        <div className="overflow-x-auto">
          <Table className="min-w-full">
            <TableHeader>
              <TableRow>
                <TableHead
                  className="sortable whitespace-nowrap"
                  onClick={() => requestSort('status')}
                >
                  Status{getSortDirection('status')}
                </TableHead>
                <TableHead
                  className="sortable whitespace-nowrap"
                  onClick={() => requestSort('cluster')}
                >
                  Cluster{getSortDirection('cluster')}
                </TableHead>
                <TableHead
                  className="sortable whitespace-nowrap hidden sm:table-cell"
                  onClick={() => requestSort('user')}
                >
                  User{getSortDirection('user')}
                </TableHead>
                <TableHead
                  className="sortable whitespace-nowrap hidden md:table-cell"
                  onClick={() => requestSort('workspace')}
                >
                  Workspace{getSortDirection('workspace')}
                </TableHead>
                <TableHead
                  className="sortable whitespace-nowrap hidden lg:table-cell"
                  onClick={() => requestSort('infra')}
                >
                  Infra{getSortDirection('infra')}
                </TableHead>
                <TableHead
                  className="sortable whitespace-nowrap hidden xl:table-cell"
                  onClick={() => requestSort('resources_str')}
                >
                  Resources{getSortDirection('resources_str')}
                </TableHead>
                <TableHead
                  className="sortable whitespace-nowrap"
                  onClick={() => requestSort('time')}
                >
                  Started{getSortDirection('time')}
                </TableHead>
                {showHistory && (
                  <TableHead
                    className="sortable whitespace-nowrap hidden lg:table-cell"
                    onClick={() => requestSort('duration')}
                  >
                    Duration{getSortDirection('duration')}
                  </TableHead>
                )}
                <TableHead
                  className="sortable whitespace-nowrap hidden md:table-cell"
                  onClick={() => requestSort('autostop')}
                >
                  Autostop{getSortDirection('autostop')}
                </TableHead>
                <TableHead className="sticky right-0 bg-white">
                  Actions
                </TableHead>
              </TableRow>
            </TableHeader>

            <TableBody>
              {loading && isInitialLoad ? (
                <TableRow>
                  <TableCell
                    colSpan={9}
                    className="text-center py-6 text-gray-500"
                  >
                    <div className="flex justify-center items-center">
                      <CircularProgress size={20} className="mr-2" />
                      <span>Loading...</span>
                    </div>
                  </TableCell>
                </TableRow>
              ) : paginatedData.length > 0 ? (
                paginatedData.map((item, index) => {
                  return (
                    <TableRow key={index}>
                      <TableCell>
                        <StatusBadge status={item.status} />
                      </TableCell>
                      <TableCell>
                        <Link
                          href={`/clusters/${item.isHistorical ? item.cluster_hash : item.cluster || item.name}`}
                          className="text-blue-600"
                        >
                          {item.cluster || item.name}
                        </Link>
                      </TableCell>
                      <TableCell className="hidden sm:table-cell">
                        <UserDisplay
                          username={item.user}
                          userHash={item.user_hash}
                        />
                      </TableCell>
                      <TableCell className="hidden md:table-cell">
                        <Link
                          href="/workspaces"
                          className="text-blue-600 hover:underline"
                        >
                          {item.workspace || 'default'}
                        </Link>
                      </TableCell>
                      <TableCell className="hidden lg:table-cell">
                        <NonCapitalizedTooltip
                          content={item.full_infra || item.infra}
                          className="text-sm text-muted-foreground"
                        >
                          <span>
                            <Link
                              href="/infra"
                              className="text-blue-600 hover:underline"
                            >
                              {item.cloud}
                            </Link>
                            {item.infra.includes('(') && (
                              <span>
                                {' ' +
                                  item.infra.substring(item.infra.indexOf('('))}
                              </span>
                            )}
                          </span>
                        </NonCapitalizedTooltip>
                      </TableCell>
                      <TableCell className="hidden xl:table-cell">
                        <NonCapitalizedTooltip
                          content={
                            item.resources_str_full || item.resources_str
                          }
                          className="text-sm text-muted-foreground"
                        >
                          <span>{item.resources_str}</span>
                        </NonCapitalizedTooltip>
                      </TableCell>
                      <TableCell>
                        <TimestampWithTooltip date={item.time} />
                      </TableCell>
                      {showHistory && (
                        <TableCell className="hidden lg:table-cell">
                          {formatDuration(item.duration)}
                        </TableCell>
                      )}
                      <TableCell className="hidden md:table-cell">
                        {item.isHistorical
                          ? '-'
                          : formatAutostop(item.autostop, item.to_down)}
                      </TableCell>
                      <TableCell className="text-left sticky right-0 bg-white">
                        {!item.isHistorical && (
                          <Status2Actions
                            cluster={item.cluster}
                            status={item.status}
                            onOpenSSHModal={onOpenSSHModal}
                            onOpenVSCodeModal={onOpenVSCodeModal}
                          />
                        )}
                      </TableCell>
                    </TableRow>
                  );
                })
              ) : (
                <TableRow>
                  <TableCell
                    colSpan={9}
                    className="text-center py-6 text-gray-500"
                  >
                    {showHistory ? 'No clusters found' : 'No active clusters'}
                  </TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </div>
      </Card>

      {data.length > 0 && (
        <div className="flex justify-end items-center py-2 px-4 text-sm text-gray-700">
          <div className="flex items-center space-x-4">
            <div className="flex items-center">
              <span className="mr-2">Rows per page:</span>
              <div className="relative inline-block">
                <select
                  value={pageSize}
                  onChange={handlePageSizeChange}
                  className="py-1 pl-2 pr-6 appearance-none outline-none cursor-pointer border-none bg-transparent"
                  style={{ minWidth: '40px' }}
                >
                  <option value={10}>10</option>
                  <option value={30}>30</option>
                  <option value={50}>50</option>
                  <option value={100}>100</option>
                  <option value={200}>200</option>
                </select>
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-4 w-4 text-gray-500 absolute right-0 top-1/2 transform -translate-y-1/2 pointer-events-none"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M19 9l-7 7-7-7"
                  />
                </svg>
              </div>
            </div>
            <div>
              {startIndex + 1} – {Math.min(endIndex, sortedData.length)} of{' '}
              {sortedData.length}
            </div>
                         <div className="flex items-center space-x-2">
               <button
                 onClick={goToPreviousPage}
                 disabled={currentPage === 1}
                 className="h-7 w-7 p-0 border border-gray-300 rounded hover:bg-gray-50 disabled:opacity-50"
               >
                 {'<<'}
               </button>
               <button
                 onClick={goToPreviousPage}
                 disabled={currentPage === 1}
                 className="h-7 w-7 p-0 border border-gray-300 rounded hover:bg-gray-50 disabled:opacity-50"
               >
                 {'<'}
               </button>
               <button
                 onClick={goToNextPage}
                 disabled={currentPage === totalPages}
                 className="h-7 w-7 p-0 border border-gray-300 rounded hover:bg-gray-50 disabled:opacity-50"
               >
                 {'>'}
               </button>
               <button
                 onClick={() => setCurrentPage(totalPages)}
                 disabled={currentPage === totalPages}
                 className="h-7 w-7 p-0 border border-gray-300 rounded hover:bg-gray-50 disabled:opacity-50"
               >
                 {'>>'}
               </button>
             </div>
          </div>
        </div>
      )}
    </div>
  );
}

export const handleVSCodeConnection = (cluster, onOpenVSCodeModal) => {
  // Open the modal for VSCode instructions
  onOpenVSCodeModal(cluster);
};

const handleConnect = (cluster, onOpenSSHModal) => {
  // Open the modal for SSH instructions
  onOpenSSHModal(cluster);
};

export const enabledActions = (status) => {
  // Define which actions are enabled based on cluster status
  const actionsMap = {
    RUNNING: ['ssh', 'vscode', 'stop'],
    STOPPED: ['start', 'delete'],
    LAUNCHING: [],
    STOPPING: [],
    TERMINATED: ['delete'],
  };
  return actionsMap[status] || [];
};

export function Status2Actions({
  withLabel = false,
  cluster,
  status,
  onOpenSSHModal,
  onOpenVSCodeModal,
}) {
  const enabled = enabledActions(status);

  const handleActionClick = (actionName) => {
    if (actionName === 'ssh') {
      handleConnect(cluster, onOpenSSHModal);
    } else if (actionName === 'vscode') {
      handleVSCodeConnection(cluster, onOpenVSCodeModal);
    }
    // Add other action handlers as needed
  };

     return (
     <div className="flex items-center gap-1">
       {enabled.includes('ssh') && (
         <button
           onClick={() => handleActionClick('ssh')}
           className="h-7 w-7 p-0 hover:bg-gray-100 rounded"
           title="SSH"
         >
           <Terminal className="h-3 w-3" />
         </button>
       )}
       {enabled.includes('vscode') && (
         <button
           onClick={() => handleActionClick('vscode')}
           className="h-7 w-7 p-0 hover:bg-gray-100 rounded"
           title="VS Code"
         >
           <SquareCode className="h-3 w-3" />
         </button>
       )}
     </div>
   );
}
